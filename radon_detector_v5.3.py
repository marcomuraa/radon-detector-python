#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.23
#  in conjunction with Tcl version 8.6
#    May 25, 2019 05:07:25 PM CEST  platform: Windows NT

#Radon detector by Marco Mura
#This program detects Radon in an image using google's TensorFlow library
#original code:
#https://github.com/EdjeElectronics/TensorFlow-Object-Detection-API-Tutorial-Train-Multiple-Objects-Windows-10

print("Program started, welcome to Radon Detector v5.0 by Marco Mura")
#initiate stuff for tkinter window

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import V1_support

#import other libraries
import os
from os import path
import cv2
import numpy as np
import tensorflow as tf
import sys
from tkinter import messagebox, filedialog, ttk
from tkinter import *
from PIL import ImageTk, Image
import time

#this gets imported from utils folder
from utils import label_map_util
from utils import visualization_utils as vis_util




def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    V1_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    V1_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


#use current work directory as default directory for images
path_to_image = os.path.join(os.getcwd(), "images")

#tensorflow stuff
label_map = label_map_util.load_labelmap(os.path.join(os.getcwd(),'training','labelmap.pbtxt'))
categories = label_map_util.convert_label_map_to_categories(label_map, max_num_classes=1, use_display_name=True)
category_index = label_map_util.create_category_index(categories)

#load TensorFlow model into memory
print ("Loading TF model")
detection_graph = tf.Graph()
with detection_graph.as_default():
    od_graph_def = tf.GraphDef()
    with tf.gfile.GFile(os.path.join(os.getcwd(),'inference_graph','frozen_inference_graph.pb'), 'rb') as fid:
        serialized_graph = fid.read()
        od_graph_def.ParseFromString(serialized_graph)
        tf.import_graph_def(od_graph_def, name='')

        sess = tf.Session(graph=detection_graph)
        print ("Done loading TF model")

#create arrays for how many radon holes and image with boxes drawn on top and filename; same index you can get filename + all of these things
rholes_array = []
rholes_boxes = []
filename_array = []

i = 0
spinbox = 0.4

class Toplevel1:
    global path_to_image
    global label_map
    global categories
    global category_index
    global detection_graph
    global i
    global rholes_boxes, rholes_array, spinbox

    def ask_folder(self, top=None):
        global path_to_image

        print("Asking user for folder")
        path_to_image = filedialog.askdirectory(initialdir = os.getcwd())
        self.image_dir_lbl.configure(text=path_to_image)
        #image_dir_lbl.pack()



    def increment_i(self, top=None):
        global i
        i += 1

        if (i > len(rholes_array)):
            i = 0
        
        self.show_image()

    def decrement_i(self, top=None):
        global i
        i -= 1

        if (i < 0):
            i = 0
        
        self.show_image()

    def show_image(self, top=None):
        global i, rholes_boxes, filename_array, rholes_array

        #from https://solarianprogrammer.com/2018/04/20/python-opencv-show-image-tkinter-window/
        #image data in now inside a numpy array. It has to be converted to something that TKinter can display 
        #create a variable that contains the image converted from the array
        photo = ImageTk.PhotoImage(image = Image.fromarray(rholes_boxes[i]))
        
        #show the image
        self.Canvas1.create_image(0, 0, image=photo, anchor=NW)
        
        #also show name of the current image
        self.img_name_lbl_2.configure(text=filename_array[i])
        
        #and show how many radon holes
        self.rholes_lbl.configure(text=rholes_array[i])


        self.prev_btn.configure(command = self.decrement_i)
        self.nxt_btn.configure(command = self.increment_i)
        #without this it doesn't work
        Toplevel1.mainloop()


    def detect(self, top=None):
        global path_to_image, rholes_array, rholes, rholes_boxes, i, filename_array, spinbox

        print("Starting object detection")

        #define input tensor, which is the image
        image_tensor = detection_graph.get_tensor_by_name('image_tensor:0')

        #output is number of detected objects
        

        for filename in os.listdir(path_to_image):
            detection_boxes = detection_graph.get_tensor_by_name('detection_boxes:0')
            detection_scores = detection_graph.get_tensor_by_name('detection_scores:0')
            detection_classes = detection_graph.get_tensor_by_name('detection_classes:0')
            
            #import the image with cv2 (this automatically converts it into a numpy array which TensorFlow can use)
            image = cv2.imread(os.path.join(path_to_image, filename))

            # Expand dimensions since the TensorFlow model expects images to have shape: [1, None, None, 3]
            image_expanded = np.expand_dims(image, axis=0)
            image_tensor = detection_graph.get_tensor_by_name('image_tensor:0')
            
            # Each box represents a part of the image where a particular object was detected.
            boxes = detection_graph.get_tensor_by_name('detection_boxes:0')
            
            # Each score represent how level of confidence for each of the objects.
            # Score is shown on the result image, together with the class label.
            scores = detection_graph.get_tensor_by_name('detection_scores:0')
            classes = detection_graph.get_tensor_by_name('detection_classes:0')
            num_detections = detection_graph.get_tensor_by_name('num_detections:0')


            # Perform the actual detection by running the model with the image as input
            (boxes, scores, classes) = sess.run([detection_boxes, detection_scores, detection_classes], feed_dict={image_tensor: image_expanded})

            #convert image variable into numpy array to draw the results (without this it throws error on next line that image must be numpy array)
            data = np.asarray(image)

            # Draw the results of the detection (aka 'visulaize the results')
            vis_util.visualize_boxes_and_labels_on_image_array(data, np.squeeze(boxes), np.squeeze(classes).astype(np.int32), np.squeeze(scores), category_index, use_normalized_coordinates=True, line_thickness=4, min_score_thresh=spinbox)

            #count how many and print
            rholes = len([category_index.get(value) for index,value in enumerate(classes[0]) if scores[0,index] > spinbox])
            print(filename)
            print(rholes)

            #insert number of rholes in rholes array
            rholes_array.append(rholes)

            #insert image with visualized result in rholes boxes array
            rholes_boxes.append(data)

            #insert image filename in an array for later use
            filename_array.append(filename)

        print("Calling function to show images")
        i = 0
        self.show_image()

    def __init__(self, top=None):
        global path_to_image, spinbox

        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("629x657+385+18")
        top.title("Radon Detector V5")
        top.configure(background="#d9d9d9")

        self.select_image_dir = tk.Button(top)
        self.select_image_dir.place(relx=0.016, rely=0.015, height=34, width=147)

        self.select_image_dir.configure(activebackground="#ececec")
        self.select_image_dir.configure(activeforeground="#000000")
        self.select_image_dir.configure(background="#d9d9d9")
        self.select_image_dir.configure(disabledforeground="#a3a3a3")
        self.select_image_dir.configure(foreground="#000000")
        self.select_image_dir.configure(highlightbackground="#d9d9d9")
        self.select_image_dir.configure(highlightcolor="black")
        self.select_image_dir.configure(pady="0")
        self.select_image_dir.configure(text='''Select images folder''')
        self.select_image_dir.configure(width=147)
        self.select_image_dir.configure(command = lambda: self.ask_folder())

        self.start_detection_btn = tk.Button(top)
        self.start_detection_btn.place(relx=0.27, rely=0.015, height=34
                , width=87)
        self.start_detection_btn.configure(activebackground="#ececec")
        self.start_detection_btn.configure(activeforeground="#000000")
        self.start_detection_btn.configure(background="#d9d9d9")
        self.start_detection_btn.configure(disabledforeground="#a3a3a3")
        self.start_detection_btn.configure(foreground="#000000")
        self.start_detection_btn.configure(highlightbackground="#d9d9d9")
        self.start_detection_btn.configure(highlightcolor="black")
        self.start_detection_btn.configure(pady="0")
        self.start_detection_btn.configure(text='''START''')
        self.start_detection_btn.configure(width=87)
        self.start_detection_btn.configure(command = lambda : self.detect())

        self.image_dir_lbl = tk.Label(top)
        self.image_dir_lbl.place(relx=0.429, rely=0.015, height=31, width=274)
        self.image_dir_lbl.configure(background="#d9d9d9")
        self.image_dir_lbl.configure(disabledforeground="#a3a3a3")
        self.image_dir_lbl.configure(foreground="#000000")
        self.image_dir_lbl.configure(text=path_to_image)
        self.image_dir_lbl.configure(width=254)

        self.threshold_var = tk.Spinbox(top, from_=0.4, to=1.0)
        self.threshold_var.place(relx=0.906, rely=0.03, relheight=0.029
                , relwidth=0.056)
        self.threshold_var.configure(activebackground="#f9f9f9")
        self.threshold_var.configure(background="white")
        self.threshold_var.configure(buttonbackground="#d9d9d9")
        self.threshold_var.configure(disabledforeground="#a3a3a3")
        self.threshold_var.configure(foreground="black")
        self.threshold_var.configure(highlightbackground="black")
        self.threshold_var.configure(highlightcolor="black")
        self.threshold_var.configure(increment="0.1")
        self.threshold_var.configure(insertbackground="black")
        self.threshold_var.configure(selectbackground="#c4c4c4")
        self.threshold_var.configure(selectforeground="black")
        self.threshold_var.configure(textvariable=spinbox)
        self.threshold_var.configure(width=35)

        self.threshold_lbl = tk.Label(top)
        self.threshold_lbl.place(relx=0.874, rely=0.0, height=21, width=59)
        self.threshold_lbl.configure(background="#d9d9d9")
        self.threshold_lbl.configure(disabledforeground="#a3a3a3")
        self.threshold_lbl.configure(foreground="#000000")
        self.threshold_lbl.configure(text='''Threshold''')

        self.prev_btn = tk.Button(top)
        self.prev_btn.place(relx=0.668, rely=0.822, height=34, width=97)
        self.prev_btn.configure(activebackground="#ececec")
        self.prev_btn.configure(activeforeground="#000000")
        self.prev_btn.configure(background="#d9d9d9")
        self.prev_btn.configure(disabledforeground="#a3a3a3")
        self.prev_btn.configure(foreground="#000000")
        self.prev_btn.configure(highlightbackground="#d9d9d9")
        self.prev_btn.configure(highlightcolor="black")
        self.prev_btn.configure(pady="0")
        self.prev_btn.configure(text='''Previous''')
        self.prev_btn.configure(width=97)
        self.prev_btn.configure(command = lambda : self.decrement_i)

        self.nxt_btn = tk.Button(top)
        self.nxt_btn.place(relx=0.843, rely=0.822, height=34, width=87)
        self.nxt_btn.configure(activebackground="#ececec")
        self.nxt_btn.configure(activeforeground="#000000")
        self.nxt_btn.configure(background="#d9d9d9")
        self.nxt_btn.configure(disabledforeground="#a3a3a3")
        self.nxt_btn.configure(foreground="#000000")
        self.nxt_btn.configure(highlightbackground="#d9d9d9")
        self.nxt_btn.configure(highlightcolor="black")
        self.nxt_btn.configure(pady="0")
        self.nxt_btn.configure(text='''Next''')
        self.nxt_btn.configure(width=87)
        self.prev_btn.configure(command = lambda : self.increment_i)

        self.img_name_lbl_static = tk.Label(top)
        self.img_name_lbl_static.place(relx=0.016, rely=0.822, height=31
                , width=84)
        self.img_name_lbl_static.configure(background="#d9d9d9")
        self.img_name_lbl_static.configure(disabledforeground="#a3a3a3")
        self.img_name_lbl_static.configure(foreground="#000000")
        self.img_name_lbl_static.configure(justify='left')
        self.img_name_lbl_static.configure(text='''Image name:''')
        self.img_name_lbl_static.configure(width=84)

        self.detected_radon_lbl_static = tk.Label(top)
        self.detected_radon_lbl_static.place(relx=0.382, rely=0.822, height=31
                , width=94)
        self.detected_radon_lbl_static.configure(background="#d9d9d9")
        self.detected_radon_lbl_static.configure(disabledforeground="#a3a3a3")
        self.detected_radon_lbl_static.configure(foreground="#000000")
        self.detected_radon_lbl_static.configure(text='''Detected Radon:''')
        self.detected_radon_lbl_static.configure(width=94)

        self.img_name_lbl_2 = tk.Label(top)
        self.img_name_lbl_2.place(relx=0.159, rely=0.822, height=31, width=134)
        self.img_name_lbl_2.configure(background="#d9d9d9")
        self.img_name_lbl_2.configure(disabledforeground="#a3a3a3")
        self.img_name_lbl_2.configure(foreground="#000000")
        self.img_name_lbl_2.configure(justify='left')
        self.img_name_lbl_2.configure(width=134)

        self.rholes_lbl = tk.Label(top)
        self.rholes_lbl.place(relx=0.556, rely=0.822, height=31, width=44)
        self.rholes_lbl.configure(background="#d9d9d9")
        self.rholes_lbl.configure(disabledforeground="#a3a3a3")
        self.rholes_lbl.configure(foreground="#000000")
        self.rholes_lbl.configure(width=44)

        self.export_lbl_static = tk.Label(top)
        self.export_lbl_static.place(relx=0.016, rely=0.898, height=21
                , width=224)
        self.export_lbl_static.configure(background="#d9d9d9")
        self.export_lbl_static.configure(disabledforeground="#a3a3a3")
        self.export_lbl_static.configure(foreground="#000000")
        self.export_lbl_static.configure(justify='left')
        self.export_lbl_static.configure(text='''Export result as''')
        self.export_lbl_static.configure(width=224)

        self.excel_file_name = ttk.Entry(top)
        self.excel_file_name.place(relx=0.397, rely=0.898, relheight=0.032
                , relwidth=0.423)
        self.excel_file_name.configure(width=266)
        self.excel_file_name.configure(takefocus="")
        self.excel_file_name.configure(cursor="ibeam")

        self.export_btn = tk.Button(top)
        self.export_btn.place(relx=0.843, rely=0.883, height=34, width=87)
        self.export_btn.configure(activebackground="#ececec")
        self.export_btn.configure(activeforeground="#000000")
        self.export_btn.configure(background="#d9d9d9")
        self.export_btn.configure(disabledforeground="#a3a3a3")
        self.export_btn.configure(foreground="#000000")
        self.export_btn.configure(highlightbackground="#d9d9d9")
        self.export_btn.configure(highlightcolor="black")
        self.export_btn.configure(pady="0")
        self.export_btn.configure(text='''Export''')
        self.export_btn.configure(width=87)

        self.Canvas1 = tk.Canvas(top)
        self.Canvas1.place(relx=0.016, rely=0.076, relheight=0.735
                  , relwidth=0.959)
        self.Canvas1.configure(background="#d9d9d9")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(selectforeground="black")
        self.Canvas1.configure(width=603)

if __name__ == '__main__':
    vp_start_gui()
